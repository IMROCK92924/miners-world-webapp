class MiningModal {
    constructor() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        const savedTools = localStorage.getItem('miningTools');
        this.tools = savedTools ? JSON.parse(savedTools) : [
            {
                id: 'mfactory',
                name: 'Mining Factory',
                image: 'assets/NFT/Mfactory.png',
                rarity: 'epic',
                durability: {
                    current: 100,
                    max: 200
                },
                harvestTime: 120, // 2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞
                lastHarvest: null
            },
            {
                id: 'therobot',
                name: 'Mining Robot',
                image: 'assets/NFT/TheRobot.png',
                rarity: 'rare',
                durability: {
                    current: 85,
                    max: 170
                },
                harvestTime: 90, // 1.5 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞
                lastHarvest: null
            },
            {
                id: 'mstation',
                name: 'Mining Station',
                image: 'assets/NFT/Mstation.png',
                rarity: 'epic',
                durability: {
                    current: 95,
                    max: 190
                },
                harvestTime: 150, // 2.5 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞
                lastHarvest: null
            }
        ];

        this.updateInterval = null;
    }

    saveState() {
        localStorage.setItem('miningTools', JSON.stringify(this.tools));
    }

    formatTime(seconds) {
        if (seconds < 0) return '00:00:00';
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    canClaim(tool) {
        if (!tool.lastHarvest) return true;
        const now = Date.now();
        const elapsed = Math.floor((now - tool.lastHarvest) / 1000);
        return elapsed >= tool.harvestTime;
    }

    claimRewards(toolId) {
        const tool = this.tools.find(t => t.id === toolId);
        if (!tool || !this.canClaim(tool)) return;

        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
        const rewards = {
            common: { irid: 1, rubid: 1, fel: 1 },
            uncommon: { irid: 2, rubid: 2, fel: 2 },
            rare: { irid: 3, rubid: 3, fel: 3 },
            epic: { irid: 5, rubid: 5, fel: 5 }
        };

        const reward = rewards[tool.rarity];
        gameState.resources.irid += reward.irid;
        gameState.resources.rubid += reward.rubid;
        gameState.resources.fel += reward.fel;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞
        tool.lastHarvest = Date.now();
        
        // –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ—á–Ω–æ—Å—Ç—å
        tool.durability.current = Math.max(0, tool.durability.current - 1);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.saveState();

        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateUI();
        this.updateMiningTools();
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —É—Å–ø–µ—Ö–∞
        playSound('success');
    }

    updateMiningTools() {
        this.tools.forEach(tool => {
            const toolElement = document.getElementById(`tool-${tool.id}`);
            if (toolElement) {
                const timeElement = toolElement.querySelector('.harvest-time');
                const claimButton = toolElement.querySelector('.claim-button');
                
                if (timeElement && claimButton) {
                    if (tool.lastHarvest) {
                        const now = Date.now();
                        const elapsed = Math.floor((now - tool.lastHarvest) / 1000);
                        const remaining = Math.max(0, tool.harvestTime - elapsed);
                        
                        timeElement.textContent = `‚è± ${this.formatTime(remaining)}`;
                        claimButton.disabled = !this.canClaim(tool);
                    } else {
                        timeElement.textContent = `‚è± Ready!`;
                        claimButton.disabled = false;
                    }
                }
            }
        });
    }

    show() {
        const modalContainer = document.getElementById("modal-container");
        modalContainer.innerHTML = "";
        
        const modal = document.createElement("div");
        modal.className = "modal mining";

        const toolsHTML = this.tools.map(tool => `
            <div class="mining-tool" id="tool-${tool.id}">
                <div class="tool-header">
                    <div class="tool-image">
                        <img src="${tool.image}" alt="${tool.name}">
                    </div>
                    <div class="tool-info">
                        <div class="tool-name">${tool.name}</div>
                        <div class="harvest-time">‚è± ${tool.lastHarvest ? this.formatTime(tool.harvestTime) : 'Ready!'}</div>
                        <div class="tool-durability">üõ† ${tool.durability.current}/${tool.durability.max}</div>
                        <button class="claim-button" onclick="miningModal.claimRewards('${tool.id}')" ${!this.canClaim(tool) ? 'disabled' : ''}>
                            CLAIM
                        </button>
                    </div>
                </div>
            </div>
        `).join('');

        modal.innerHTML = `
            <div class="mining-container">
                <div class="mining-tools">
                    ${toolsHTML}
                </div>
            </div>
        `;

        modalContainer.appendChild(modal);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        this.updateInterval = setInterval(() => this.updateMiningTools(), 1000);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ modalContainer
        modalContainer.onclick = (e) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –Ω–∞ modalContainer, –∞ –Ω–µ –Ω–∞ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            if (e.target === modalContainer) {
                this.close();
            }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞ –∫–ª–∞–≤–∏—à—É Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.close();
            }
        });
    }

    close() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
        const modalContainer = document.getElementById("modal-container");
        modalContainer.innerHTML = "";
        
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Escape –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        document.removeEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                this.close();
            }
        });
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    window.miningModal = new MiningModal();
    console.log('MiningModal initialized!');
}); 