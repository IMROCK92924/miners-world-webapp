console.log('script.js: Starting initialization');

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const ENERGY_MAX = 10;
const ENERGY_MIN = 0;
const DESIGN_WIDTH = 720;
const DESIGN_HEIGHT = 1480;

// –ê—É–¥–∏–æ —ç—Ñ—Ñ–µ–∫—Ç—ã
const sounds = {
  click: null,
  success: null,
  error: null
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
const gameState = {
  energy: 3,
  resources: {
    irid: 0,
    rubid: 0,
    fel: 0
  },
  settings: {
    soundEnabled: true
  }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const gameSettings = {
    language: 'ru',
    referralCount: 0
};

// –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
const translations = {
    ru: {
        settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        language: '–Ø–∑—ã–∫',
        referrals: '–†–µ—Ñ–µ—Ä–∞–ª—ã',
        save: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
        cancel: '–û—Ç–º–µ–Ω–∞'
    },
    en: {
        settings: 'Settings',
        language: 'Language',
        referrals: 'Referrals',
        save: 'Save',
        cancel: 'Cancel'
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
function getText(key) {
    return translations[gameSettings.language][key];
}

// –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function resetUserData() {
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  gameState.energy = 3;
  gameState.resources = {
    irid: 0,
    rubid: 0,
    fel: 0
  };
  // –û–±–Ω–æ–≤–ª—è–µ–º UI
  updateUI();
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function saveGameState() {
  localStorage.setItem('gameState', JSON.stringify(gameState));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async function loadGameState() {
  try {
    const saved = localStorage.getItem('gameState');
    if (saved) {
      const parsed = JSON.parse(saved);
      Object.assign(gameState, parsed);
    }
    updateUI();
  } catch (error) {
    console.error('Error loading game state:', error);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
  setEnergyLevel(gameState.energy);
  document.getElementById('irid').textContent = gameState.resources.irid;
  document.getElementById('rubid').textContent = gameState.resources.rubid;
  document.getElementById('fel').textContent = gameState.resources.fel;
}

function setEnergyLevel(level) {
  if (level < ENERGY_MIN) level = ENERGY_MIN;
  if (level > ENERGY_MAX) level = ENERGY_MAX;
  gameState.energy = level;
  document.getElementById("energyBar").src = `assets/energy/energy_${level}.png`;
  saveGameState();
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
function playSound(soundName) {
  const sound = sounds[soundName];
  if (sound && gameState.settings.soundEnabled) {
    sound.currentTime = 0;
    sound.play().catch(err => console.log('Audio playback failed:', err));
  }
}

// Debounce —Ñ—É–Ω–∫—Ü–∏—è
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

function formatTime(seconds) {
  if (seconds < 0) return '00:00:00';
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = seconds % 60;
  return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
}

function canClaim(tool) {
  if (!tool.lastHarvest) return true;
  const now = Date.now();
  const elapsed = Math.floor((now - tool.lastHarvest) / 1000);
  return elapsed >= tool.harvestTime;
}

function claimRewards(toolId) {
  const tool = gameState.tools.find(t => t.id === toolId);
  if (!tool || !canClaim(tool)) return;

  // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É CLAIM –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
  const toolElement = document.getElementById(`tool-${toolId}`);
  const claimButton = toolElement.querySelector('.claim-button');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–¥–∫–æ—Å—Ç–∏
  let resourceType = 'fel'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (tool.rarity === 'epic') {
    resourceType = 'irid';
  } else if (tool.rarity === 'rare') {
    resourceType = 'rubid';
  }

  // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  createResourceTransferEffect(claimButton, resourceType);

  // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
  const rewards = {
    common: { irid: 1, rubid: 1, fel: 1 },
    uncommon: { irid: 2, rubid: 2, fel: 2 },
    rare: { irid: 3, rubid: 3, fel: 3 },
    epic: { irid: 5, rubid: 5, fel: 5 }
  };

  const reward = rewards[tool.rarity];
  gameState.resources.irid += reward.irid;
  gameState.resources.rubid += reward.rubid;
  gameState.resources.fel += reward.fel;

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–±–æ—Ä–∞
  tool.lastHarvest = Date.now();
  
  // –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ—á–Ω–æ—Å—Ç—å
  tool.durability.current = Math.max(0, tool.durability.current - 1);

  // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ–ª–∞ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å—Å—è
  setTimeout(() => {
    updateUI();
    updateMiningTools();
  }, 800);
  
  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —É—Å–ø–µ—Ö–∞
  playSound('success');
}

function updateMiningTools() {
  const tools = gameState.tools;
  tools.forEach(tool => {
    const toolElement = document.getElementById(`tool-${tool.id}`);
    if (toolElement) {
      const timeElement = toolElement.querySelector('.harvest-time');
      const claimButton = toolElement.querySelector('.claim-button');
      
      if (timeElement && claimButton) {
        if (tool.lastHarvest) {
          const now = Date.now();
          const elapsed = Math.floor((now - tool.lastHarvest) / 1000);
          const remaining = Math.max(0, tool.harvestTime - elapsed);
          
          timeElement.textContent = `‚è± Time: ${formatTime(remaining)}`;
          
          if (canClaim(tool)) {
            claimButton.disabled = false;
            claimButton.textContent = 'CLAIM';
          } else {
            claimButton.disabled = true;
            claimButton.textContent = 'WAIT';
          }
        } else {
          timeElement.textContent = `‚è± Time: Ready!`;
          claimButton.disabled = false;
          claimButton.textContent = 'CLAIM';
        }
      }
    }
  });
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é openModal
function openModal(name) {
    playSound('click');
    const modalContainer = document.getElementById("modal-container");
    modalContainer.innerHTML = "";
    const modal = document.createElement("div");
    modal.className = `modal ${name}`;

    if (name === "settings") {
        modal.innerHTML = `
            <h2 class="settings-header">${getText('settings')}</h2>
            
            <div class="settings-section">
                <div class="settings-section-title">
                    <i>üåç</i> ${getText('language')}
                </div>
                <div class="language-selector">
                    <button class="language-btn ${gameSettings.language === 'ru' ? 'active' : ''}" 
                            onclick="changeLanguage('ru')">–†—É—Å—Å–∫–∏–π</button>
                    <button class="language-btn ${gameSettings.language === 'en' ? 'active' : ''}" 
                            onclick="changeLanguage('en')">English</button>
                </div>
            </div>
            
            <div class="settings-section">
                <div class="settings-section-title">
                    <i>üë•</i> ${getText('referrals')}
                </div>
                <div class="referral-info">
                    <span class="referral-label">${getText('referrals')}:</span>
                    <span class="referral-count">${gameSettings.referralCount}</span>
                </div>
            </div>
            
            <div class="settings-footer">
                <button class="settings-btn settings-save" onclick="saveSettings()">${getText('save')}</button>
                <button class="settings-btn settings-cancel" onclick="closeModal()">${getText('cancel')}</button>
            </div>
        `;
    } else if (name === "energy") {
        modal.innerHTML = `
            <input id="energyInput" class="energy-input" type="number" 
                   min="${ENERGY_MIN}" max="${ENERGY_MAX}" 
                   placeholder="${ENERGY_MIN}‚Äì${ENERGY_MAX}"
                   value="${gameState.energy}">
            <div class="modal-buttons">
                <button id="energyConfirm">OK</button>
                <button id="energyCancel" class="cancel">CANCEL</button>
            </div>
        `;
        
        const input = document.getElementById("energyInput");
        input.focus();
        
        document.getElementById("energyConfirm").onclick = () => {
            const value = parseInt(input.value);
            if (!isNaN(value) && value >= ENERGY_MIN && value <= ENERGY_MAX) {
                setEnergyLevel(value);
                playSound('success');
                closeModal();
            } else {
                playSound('error');
                alert(`–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç ${ENERGY_MIN} –¥–æ ${ENERGY_MAX}`);
            }
        };
        
        document.getElementById("energyCancel").onclick = closeModal;
    } else if (name === "inventory") {
        if (window.inventoryManager) {
            window.inventoryManager.show(true);
            return;
        }
    } else if (name === "market") {
        modal.style.backgroundImage = `url('assets/modal_${name}.png')`;
    }
    
    modalContainer.appendChild(modal);
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function closeModal() {
    const modalContainer = document.getElementById("modal-container");
    if (modalContainer) {
        modalContainer.innerHTML = "";
    }
    playSound('click');
}

// –§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
function changeLanguage(lang) {
    gameSettings.language = lang;
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    openModal('settings');
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
function saveSettings() {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ localStorage
    localStorage.setItem('gameSettings', JSON.stringify(gameSettings));
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeModal();
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —É—Å–ø–µ—Ö–∞
    playSound('success');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadSettings() {
    const savedSettings = localStorage.getItem('gameSettings');
    if (savedSettings) {
        Object.assign(gameSettings, JSON.parse(savedSettings));
    }
}

let lastWidth = window.innerWidth;

function scaleGame() {
  const viewportHeight = window.visualViewport ? window.visualViewport.height : window.innerHeight;
  const actualWidth = window.innerWidth;
  const scale = actualWidth / DESIGN_WIDTH;
  const scaledHeight = DESIGN_HEIGHT * scale;
  
  const game = document.querySelector('.game');
  game.style.transform = `scale(${scale})`;
  game.style.transformOrigin = 'top left';
  
  const box = document.querySelector('.scale-box');
  box.style.width = `${DESIGN_WIDTH}px`;
  box.style.height = `${DESIGN_HEIGHT}px`;
  box.style.left = '0px';
  box.style.top = `${(viewportHeight - scaledHeight) / 2}px`;
  
  const wrapper = document.querySelector('.wrapper');
  wrapper.style.background = 'url("assets/background.png") no-repeat center/cover';
}

const handleResize = debounce(() => {
  if (window.innerWidth === lastWidth) return;
  lastWidth = window.innerWidth;
  scaleGame();
}, 250);

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é initGame
async function initGame() {
    console.log('Initializing game...');
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        loadSettings();
        await loadGameState();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        window.toolSlotManager = new ToolSlotManager();
        window.inventoryManager = new InventoryManager();
        window.soundManager = new SoundManager();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        initializeEventHandlers();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        scaleGame();
        if (window.visualViewport) {
            window.visualViewport.addEventListener("resize", scaleGame);
        }
        window.addEventListener("resize", handleResize);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä—É
        const wrapper = document.querySelector('.wrapper');
        if (wrapper) {
            wrapper.style.display = 'block';
            wrapper.style.opacity = '1';
            wrapper.style.visibility = 'visible';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        updateUI();
        
    } catch (error) {
        console.error('Game initialization error:', error);
    }
}

// –í—ã–Ω–æ—Å–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
function initializeEventHandlers() {
    document.getElementById("inventory").onclick = () => openModal("inventory");
    document.getElementById("market").onclick = () => openModal("market");
    document.getElementById("mining").onclick = () => openModal("settings");
    document.getElementById("home").onclick = closeModal;
    document.getElementById("plusButton").onclick = () => openModal("energy");
}

// Callback –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
function onResourcesLoaded(cache) {
    console.log('Resources loaded, starting game...');
    
    // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
    const loadingScreen = document.getElementById('loading-screen');
    if (loadingScreen) {
        loadingScreen.style.opacity = '0';
        loadingScreen.style.visibility = 'hidden';
        setTimeout(() => {
            loadingScreen.style.display = 'none';
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            const wrapper = document.querySelector('.wrapper');
            if (wrapper) {
                wrapper.style.display = 'block';
                wrapper.style.opacity = '1';
                wrapper.style.visibility = 'visible';
            }
        }, 300); // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    window.toolSlotManager = new ToolSlotManager();
    window.inventoryManager = new InventoryManager();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    updateResourceDisplay();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    setInterval(() => {
        saveGameState();
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
function updateResourceDisplay() {
    try {
        const resources = gameState.resources || {
            fel: 0,
            irid: 0,
            rubid: 0
        };
        
        document.getElementById('fel').textContent = resources.fel || 0;
        document.getElementById('irid').textContent = resources.irid || 0;
        document.getElementById('rubid').textContent = resources.rubid || 0;
    } catch (error) {
        console.error('Error updating resource display:', error);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initGame);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
window.createResourceTransferEffect = function(button, resourceType) {
  const buttonRect = button.getBoundingClientRect();
  const resourceElement = document.getElementById(resourceType);
  const resourceRect = resourceElement.getBoundingClientRect();

  // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–∏—Ü
  for (let i = 0; i < 5; i++) {
    setTimeout(() => {
      const particle = document.createElement('div');
      particle.className = 'resource-particle';
      
      // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (–∫–Ω–æ–ø–∫–∞ CLAIM)
      particle.style.left = `${buttonRect.left + buttonRect.width / 2}px`;
      particle.style.top = `${buttonRect.top + buttonRect.height / 2}px`;
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
      const flyX = resourceRect.left - buttonRect.left;
      const flyY = resourceRect.top - buttonRect.top;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
      particle.style.setProperty('--fly-x', `${flyX}px`);
      particle.style.setProperty('--fly-y', `${flyY}px`);
      
      document.body.appendChild(particle);
      
      // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
      particle.addEventListener('animationend', () => {
        particle.remove();
        if (i === 4) { // –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç–∏—Ü–∞
          resourceElement.classList.add('highlight');
          setTimeout(() => {
            resourceElement.classList.remove('highlight');
          }, 500);
        }
      });
    }, i * 100); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç–∏—Ü–∞–º–∏
  }
}

// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ CLAIM, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å —ç—Ñ—Ñ–µ–∫—Ç –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ claimRewards
document.removeEventListener('DOMContentLoaded', () => {
  const claimButtons = document.querySelectorAll('.claim-button');
  claimButtons.forEach(button => {
    button.removeEventListener('click', (e) => {
      const miningTool = e.target.closest('.mining-tool');
      if (!miningTool) return;
      
      let resourceType = 'fel';
      if (miningTool.classList.contains('rarity-epic')) {
        resourceType = 'irid';
      } else if (miningTool.classList.contains('rarity-rare')) {
        resourceType = 'rubid';
      }
      
      createResourceTransferEffect(button, resourceType);
    });
  });
});